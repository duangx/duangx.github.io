[root@172-18-128-25 yzadmin]$ cat /usr/local/scripts/ping_all.sh 
#!/bin/bash

function a_sub { # 此处定义一个函数，作为一个线程(子进程)
  IP=$1
  ping -c 1 -w 1 $IP >/dev/null 2>&1
  if [ $? -eq 0 ];then
          echo "$IP"
  fi
}

num2mask(){ #将掩码长度 转换成掩码
   # 可以根据2修改下， 255.255.255.255的整型值是4294967295
   declare -i FULL_MASK_INT=4294967295
   declare -i MASK_LEN=$1
   declare -i LEFT_MOVE="32 - ${MASK_LEN}"
   declare -i N="${FULL_MASK_INT} << ${LEFT_MOVE}"
   declare -i H1="$N & 0x000000ff"
   declare -i H2="($N & 0x0000ff00) >> 8"
   declare -i L1="($N & 0x00ff0000) >> 16"
   declare -i L2="($N & 0xff000000) >> 24"
   echo "$L2.$L1.$H2.$H1"
}

get_addr () {  #计算网络地址 和 广播地址
   if [ "$1" = "-b" ]; then
      op='|';
      op1='^';
      arg='255'
      shift
   else
      op='&'
   fi
  # unset address
   while [ "$5" ]; do                
      num=$(( $1 $op ($5 $op1 $arg) ))
      shift
      address="$address.$num"
   done
   echo $address
}

get_net_brocast(){ # 针对 xx.xx.xx.xx/xx  输出 网络地址  和 广播地址
   IP_ADDR=`echo "$1" | egrep '^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$'`
   if [ -z "$IP_ADDR" ];then
      echo "Usage: xx.xx.xx.xx/xx"
      exit 1
   fi
   
   OLD_IFS="$IFS" 
   IFS="/" 
   arr=($IP_ADDR)
   IFS="$OLD_IFS"

   IP_Mask=`num2mask ${arr[1]}` #根据VLSM 转换成 xx.xx.xx.xx形式
   IP_All=${arr[0]}/$IP_Mask
   
   all=`echo $IP_All | egrep -o '[0-9]{1,3}'` #获取全部数字
   unset address #释放变量
   address=`get_addr $all`
   Begin_addr=${address#.}
   unset address
   address=`get_addr -b $all`
   End_addr=${address#.}
   
   echo "$Begin_addr:$End_addr"
}

nmap_ping(){   #多进程ping ，目前支持 最大一个 C网段的扫描

   echo $1
   IP_ADDR=`echo $1 | egrep '^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$'`

   if [ -z $IP_ADDR ];then
          echo "Usage: xx.xx.xx.xx/xx"
          return 1
   fi
        #切割 起始结束地址字符串，分离 子网段字符、开始主机号、结束主机号（以C网段为模板）
   IP_Begin_End=`get_net_brocast $1`
   IP_Begin=`echo $IP_Begin_End | awk -F: '{print $1}'`
   IP_End=`echo $IP_Begin_End | awk -F: '{print $2}'`
   IP_PreStr=${IP_Begin%.*}  #前缀为 前24位
   IP_Begin_Num=$[`echo $IP_Begin | awk -F. '{print $4}'`]
   IP_End_Num=$[`echo $IP_End | awk -F. '{print $4}'`]
   #echo "IP_PreStr $IP_PreStr"
   #echo "Begin_Num $IP_Begin_Num"
   #echo "End_Num $IP_End_Num"
   #return 1

   tmp_fifofile="/tmp/$$.fifo"
   
   mkfifo $tmp_fifofile      # 新建一个fifo类型的文件
   
   exec 6<>$tmp_fifofile      # 将fd6指向fifo类型
   
   rm $tmp_fifofile
   
   #thread=255 # 此处定义线程数
   
   for ((i=$IP_Begin_Num;i<$IP_End_Num;i++));do
        echo   
   done >&6 # 事实上就是在fd6中放置了$thread个回车符

   
   for ((i=$IP_Begin_Num;i<$IP_End_Num;i++));do # 循环，可以理解为50个主机，或其他
        read -u6
   # 一个read -u6命令执行一次，就从fd6中减去一个回车符，然后向下执行，
   # fd6中没有回车符的时候，就停在这了，从而实现了线程数量控制
   { # 此处子进程开始执行，被放到后台
           unset $IP0
           IP0=`echo $IP_PreStr`.$i
# 此处可以用来判断子进程的逻辑
           a_sub $IP0 && (  echo "a_sub is finished" >/dev/null ) || (  echo "sub error" >/dev/null  )
           echo >&6 # 当进程结束以后，再向fd6中加上一个回车符，即补上了read -u6减去的那个
   } &
   done
   

   wait # 等待所有的后台子进程结束
   exec 6>&- # 关闭df6
}

nmap0(){  #快速ping，目前支持一个C网段
        All_Str=`nmap_ping $1`
        for line in $All_Str;do
                echo $line
        done
}

if [ $# -ne 1 ];then
        echo "Usage: xx.xx.xx.xx/xx"
        exit 1
fi
nmap0 $1
